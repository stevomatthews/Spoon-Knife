# API Table Test

This option list is sorted alphabetically. Note that some options can be
either only a retrieved (r) or set (w) value.


| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_CONNTIMEO`      | 1.1.2 | pre     | `int` | msec   | 3000     | tbd    |

- Connect timeout. SRT cannot connect for RTT > 1500 msec (2 handshake exchanges) 
with the default connect timeout of 3 seconds. This option applies to the caller 
and rendezvous connection modes. The connect timeout is 10 times the value set 
for the rendezvous mode (which can be used as a workaround for this connection 
problem with earlier versions)
---

| OptName           | Since | Binding | Type      | Units  | Default  | Range  |
| ----------------- | ----- | ------- | --------- | ------ | -------- | ------ |
| `SRTO_EVENT`      |       | n/a     | `int32_t` |        | n/a      | n/a    |

- (r)
- Connection epoll flags (see [epoll\_ctl](http://man7.org/linux/man-pages/man2/epoll_ctl.2.html)). 
- One or more of the following flags: 
  - `EPOLLIN`
  - `EPOLLOUT`
  - `EPOLLERR`
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_FC`             |       | pre     | `int` | pkts   | 25600    | 32..   |

- Flight Flag Size
---

| OptName          | Since | Binding | Type      | Units   | Default  | Range  |
| ---------------- | ----- | ------- | --------- | ------- | -------- | ------ |
| `SRTO_INPUTBW`   | 1.0.5 | post    | `int64_t` | bytes/s | 0        | 0..    |

- Sender nominal input rate. Used along with OHEADBW, when MAXBW is set to 
relative (0), to calculate maximum sending rate when recovery packets are sent 
along with main media stream (INPUTBW * (100 + OHEADBW) / 100). If INPUTBW is 
not set while MAXBW is set to relative (0), the actual input rate is evaluated 
inside the library.
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_IPTOS`       | 1.0.5 | pre  | `int32_t` |   | (platform default) | 0..255 |

- IP Type of Service. Applies to sender only. *Sender: user configurable, default: 0xB8*
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_ISN` (r) | 1.3.0 | post | `int32_t` | sequence | n/a | n/a |

- The value of the ISN (Initial Sequence Number), which is the first sequence 
number put on a firstmost sent UDP packets carrying SRT data payload. *This 
value is useful for developers of some more complicated methods of flow control, 
possibly with multiple SRT sockets at a time, not predicted in any 
regular development.*
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_KMSTATE` (r) | 1.0.2 | n/a  | `int32_t` |   | n/a | n/a |

- Receiver Keying Material state. Available on both sender and receiver sides. 
- Values defined in `enum SRT_KM_STATE`:
  * `SRT_KM_S_UNSECURED`: unsecured: data not encrypted  | 
  * `SRT_KM_S_SECURING`: securing: waiting for keying material
  * `SRT_KM_S_SECURED`: secured: keying material obtained and operational (decrypting received data)
  * `SRT_KM_S_NOSECRET`: no secret: no secret configured to handle keying material
  * `SRT_KM_S_BADSECRET`: bad secret: invalid secret configured
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_IPTTL` | 1.0.5 | pre  | `int32_t` | hops | (platform default) | 1..255 |

- IP Time To Live. Applies to sender only. *Sender: user configurable, default: 64*
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_LATENCY` | 0.0.0 | pre  | `int32_t` | msec | 0 | positive only |

- This flag sets both `SRTO_RCVLATENCY` and `SRTO_PEERLATENCY` to the same value. 
Note that prior to version 1.3.0 this is the only flag to set the latency, however 
this is effectively equivalent to setting `SRTO_PEERLATENCY`, when the side is 
sender (see `SRTO_SENDER`) and `SRTO_RCVLATENCY` when the side is receiver, and 
the bidirectional stream sending is not supported.
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_LINGER` |   | pre | linger | secs | on (180) |   |

- Linger time on close (see [SO\_LINGER](http://man7.org/linux/man-pages/man7/socket.7.html)) 
*SRT recommended value: off (0)*
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_LOSSMAXTTL` (writeonly) | 1.2.0 | pre | `int` | packets | 0 | reasonable |

- The value up to which the *Reorder Tolerance* may grow. When *Reorder Tolerance* 
is > 0, then packet loss report is delayed until that number of packets come in. 
*Reorder Tolerance* increases every time a "belated" packet has come, but it 
wasn't due to retransmission (that is, when UDP packets tend to come out of 
order), with the difference between the latest sequence and this packet's 
sequence, and not more than the value of this option. By default it's 0, which 
means that this mechanism is turned off, and the loss report is always sent 
immediately upon experiencing a "gap" in sequences.
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_MAXBW`  | 1.0.5 | pre  | `int64_t` | bytes/sec | -1 | -1 | 0 | 1.. |

- Maximum send bandwidth. -1: infinite (CSRTCC limit is 30mbps) =0: relative to 
input rate (SRT 1.0.5 addition, see `SRTO_INPUTBW`) >0: absolute limit 
*SRT recommended value: 0 (relative)*
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_MESSAGEAPI` (w) | 1.3.0 | pre | bool | boolean | true |  |

- When set, this socket uses the Message API[\*], otherwise it uses Buffer API
---

| OptName           | Since | Binding | Type      | Units   | Default  | Range         |
| ----------------- | ----- | ------- | --------- | ------- | -------- | ------------- |
| `SRTO_MINVERSION` | 1.3.0 | pre     | `int32_t` | version | 0        | up to current |

- (writeonly)
- The minimum SRT version that is required from the peer. A connection to a peer 
that does not satisfy the minimum version requirement will be rejected.
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_MSS`            |       | pre     | `int` | bytes  | 1500     | 76..   |

- Maximum Segment Size. Used for buffer allocation and rate calculation using 
packet counter assuming fully filled packets. The smallest MSS between the peers 
is used. *This is 1500 by default in the overall internet. This is the maximum 
size of the UDP packet and can be only decreased, unless you have some unusual 
dedicated network settings.* 
---

| OptName              | Since | Binding | Type   | Units  | Default  | Range  |
| -------------------- | ----- | ------- | ------ | ------ | -------- | ------ |
| `SRTO_NAKREPORT`     | 1.1.0 | pre     | `bool` | true   | true     | false  |

- Receiver will send `UMSG_LOSSREPORT` messages periodically until the lost 
packet is retransmitted or intentionally dropped 
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_OHEADBW`        | 1.0.5 | post    | `int` | %      | 25       | 5..100 | 

- Recovery bandwidth overhead above input rate (see `SRTO_INPUTBW`). 
- *Sender: user configurable, default: 25%.* 
- ***To do: set-only. get should be supported.***
---

| OptName             | Since | Binding | Type   | Units | Default  | Range    |
| ------------------- | ----- | ------- | ------ | ----- | -------- | -------- |
| `SRTO_PASSPHRASE`   | 0.0.0 | pre     | string |       | [0]      | [10..79] |

- (w)
- HaiCrypt Encryption/Decryption Passphrase.  The passphrase is the shared secret 
between the sender and the receiver. It is used to generate the Key Encrypting Key 
using [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2) (Password-Based Key Derivation 
Function 2). It is used on the sender if PBKEYLEN is non zero. It is used on the 
receiver only if the received data is encrypted.  The configured passphrase cannot 
be get back (write-only). *Sender and receiver: user configurable.* 
---

| OptName               | Since | Binding | Type  | Units  | Default     | Range                             |
| --------------------- | ----- | ------- | ----- | ------ | ----------- | --------------------------------- |
| `SRTO_PAYLOADSIZE`    | 1.3.0 | pre     | int   | bytes  | 1316 (Live) | up to MTUsize-28-16, usually 1456 |

- (w)
- Sets the maximum declared size of a single call to sending function in Live mode. 
Use 0 if this value isn't used (which is default in file mode)
---

| OptName               | Since | Binding | Type      | Units  | Default  | Range                           |
| --------------------- | ----- | ------- | --------- | ------ | -------- | ------------------------------- |
| `SRTO_PBKEYLEN`       | 0.0.0 | pre     | `int32_t` | bytes  | 0        | 0 16(128/8) 24(192/8) 32(256/8) |

- Sender encryption key length. Enable sender encryption if not 0. Not required 
on receiver (set to 0), key size obtained from sender in HaiCrypt handshake. 
- *Sender: user configurable.* 
---

| OptName               | Since | Binding | Type      | Units  | Default  | Range         |
| --------------------- | ----- | ------- | --------- | ------ | -------- | ------------- |
| `SRTO_PEERLATENCY`    | 1.3.0 | pre     | `int32_t` | msec   | 0        | positive only |

- The latency value (as described in `SRTO_RCVLATENCY`) that is set by the sender 
side as a minimum value for the receiver.
---

| OptName            | Since | Binding | Type      | Units  | Default | Range  |
| ------------------ | ----- | ------- | --------- | ------ | ------- | ------ |
| `SRTO_PEERVERSION` | 1.1.0 | n/a     | `int32_t` | n/a    | n/a     | n/a    |

- (r)
- Peer SRT version. The value 0 is returned if not connected, SRT handshake not 
yet performed, or if peer is not SRT. See `SRTO_VERSION` for the version format. 
---

| OptName               | Since | Binding | Type  | Units | Default          | Range                           |
| --------------------- | ----- | ------- | ----- | ----- | ---------------- | ------------------------------- |
| `SRTO_RCVBUF`         |       | pre     | `int` | bytes | 8192 × (1500-28) | 32 × (1500-28) ..FC × (1500-28) |

- Receive Buffer Size. 
- *Receive buffer must not be greater than FC size.* 
- ***Warning: configured in bytes, converted in packets when set based on MSS 
value. For desired result, configure MSS first.***
---

| OptName           | Since | Binding | Type      | Units  | Default  | Range  |
| ----------------- | ----- | ------- | --------- | ------ | -------- | ------ |
| `SRTO_RCVDATA`    |       | n/a     | `int32_t` | pkts   | n/a      |        |

- (r)
- Size of the available data in the receive buffer.
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_RCVKMSTATE`     | 1.2.0 | post    | enum  | n/a    | n/a      |        |
 
- (readonly)
- KM state on the agent side when it's a receiver, as per `SRTO_KMSTATE`
---

| OptName               | Since | Binding | Type      | Units  | Default  | Range         |
| --------------------- | ----- | ------- | --------- | ------ | -------- | ------------- |
| `SRTO_RCVLATENCY`     | 1.3.0 | pre     | `int32_t` | msec   | 0        | positive only |

- The time that should elapse since the moment when the packet was sent and the 
moment when it's delivered to the receiver application in the receiving function. 
This time should be a buffer time large enough to cover the time spent for sending, 
unexpectedly extended RTT time, and the time needed to retransmit the lost UDP 
packet. The effective latency value will be the maximum of this options' value 
and the value of `SRTO_PEERLATENCY` set by the peer side. **This option in 
pre-1.3.0 version is available only as** `SRTO_LATENCY`.
---

| OptName               | Since | Binding | Type   | Units  | Default | Range  |
| --------------------- | ----- | ------- | ------ | ------ | ------- | ------ |
| `SRTO_RCVSYN`         |       | pre     | `bool` | true   | true    | false  |

- Synchronous (blocking) receive mode 
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_RCVTIMEO`       |       | post    | `int` | msecs  | -1       | -1..   |

- Blocking mode receiving timeout (-1: infinite)
---

| OptName               | Since | Binding | Type   | Units  | Default | Range  |
| --------------------- | ----- | ------- | ------ | ------ | ------- | ------ |
| `SRTO_RENDEZVOUS`     |       | pre     | `bool` | false  | true    | false  |

- Use Rendezvous connection mode (both sides must set this and both must use 
bind/connect to one another.
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_REUSEADDR` |   | pre |   |   | true | true | false |

- Reuse existing address
- See [SO\_REUSEADDR](http://man7.org/linux/man-pages/man7/socket.7.html))
---

| OptName        | Since | Binding | Type            | Units | Default | Range |
| -------------- | ----- | ------- | --------------- | ----- | ------- | ----- |
| `SRTO_SENDER`  | 1.0.4 | pre     | `int32_t` bool? |       | false   |       |

- Set sender side. The side that sets this flag is expected to be a sender. 
It's required when any of two connection sides supports at most *HSv4* handshake, 
and the sender side is the side that initiates the SRT extended handshake (which 
won't be done at all, if none of the sides sets this flag). This flag is 
superfluous, if **both** parties are at least version 1.3.0 and therefore 
support *HSv5* handshake, where the SRT extended handshake is done with the 
overall handshake process. This flag is however **obligatory** if at least one 
party is SRT below version 1.3.0 and does not support *HSv5*.
---

| OptName               | Since | Binding | Type          | Units      | Default  | Range            |
| --------------------- | ----- | ------- | ------------- | ---------- | -------- | ---------------- |
| `SRTO_SMOOTHER`       | 1.3.0 | pre     | `const char*` | predefined | "live"   | "live" or "file" |

- (w)
- The type of Smoother used for the transmission for that socket, which is 
responsible for the transmission and congestion control. The Smoother type must 
be exactly the same on both connecting parties, otherwise the connection is 
rejected. 
- ***TODO: might be reasonable to allow an "adaptive" value of the Smoother, 
which will accept either of the smoother types when the other party enforces it, 
and rejected if both sides are "adaptive"***
---

| OptName               | Since | Binding | Type  | Units  | Default          | Range  |
| --------------------- | ----- | ------- | ----- | ------ | ---------------- | ------ |
| `SRTO_SNDBUF`         |       | pre     | `int` | bytes  | 8192 × (1500-28) |        |

- Send Buffer Size.  ***Warning: configured in bytes, converted in packets, when 
set, based on MSS value. For desired result, configure MSS first.*** 
---

| OptName           | Since | Binding | Type      | Units  | Default  | Range  |
| ----------------- | ----- | ------- | --------- | ------ | -------- | ------ |
| `SRTO_SNDDATA`    |       | n/a     | `int32_t` | pkts   | n/a      | n/a    |

- (read-only)
- Size of the unacknowledged data in send buffer.
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_SNDPEERKMSTATE` | 1.2.0 | post    | enum  | n/a    | n/a      |        |

- (readonly)
- Peer KM state on receiver side for `SRTO_KMSTATE`
---

| OptName              | Since | Binding | Type   | Units  | Default  | Range  |
| -------------------- | ----- | ------- | ------ | ------ | -------- | ------ |
| `SRTO_SNDSYN`        |       | post    | `bool` | true   | true     | false  |

- Synchronous (blocking) send mode 
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_SNDTIMEO`       |       | post    | `int` | msecs  | -1       | -1..   |

- Blocking mode sending timeout (-1: infinite)
---

| OptName           | Since | Binding | Type      | Units  | Default  | Range  |
| ----------------- | ----- | ------- | --------- | ------ | -------- | ------ |
| `SRTO_STATE`      |       | n/a     | `int32_t` |        | n/a      | n/a    |

- (r)
- UDT connection state.
---

| OptName         | Since | Binding | Type          | Units  | Default  | Range      |
| --------------- | ----- | ------- | ------------- | ------ | -------- | ---------- |
| `SRTO_STREAMID` | 1.3.0 | pre     | `const char*` |        | empty    | any string |

- (rw)
- A string limited to 512 characters that can be set on the socket prior to 
connecting. This stream ID will be able to be retrieved by the listener side 
from the socket that is returned from `srt_accept` and was connected by a socket 
with that set stream ID. SRT does not enforce any special interpretation of the 
contents of this string. As this uses internally the `std::string` type, there 
are additional functions for it in the legacy/C++ API: `UDT::setstreamid` 
and `UDT::getstreamid`.
---

| OptName           | Since | Binding | Type            | Units | Default  | Range  |
| ----------------- | ----- | ------- | --------------- | ----- | -------- | ------ |
| `SRTO_TLPKTDROP`  | 1.0.6 | pre     | `int32_t` bool? | true  | true     | false  |

- Too-late Packet Drop. When enabled on receiver, it skips missing packets that 
have not been delivered in time and delivers the subsequent packets to the 
application when their time-to-play has come. It also sends a fake ACK to the 
sender. When enabled on sender and enabled on the receiving peer, sender drops 
the older packets that have no chance to be delivered in time. It is automatically 
enabled in sender if receiver supports it.
---

| OptName               | Since | Binding | Type  | Units  | Default     | Range            |
| --------------------- | ----- | ------- | ----- | ------ | ----------- | ---------------- |
| `SRTO_TRANSTYPE`      | 1.3.0 | pre     | enum  |        | `SRTT_LIVE` | alt: `SRTT_FILE` |

- (w)
- Sets the transmission type for the socket, in particular, setting this option 
sets multiple other parameters to their default values as required for a 
particular transmission type.
---

| OptName            | Since | Binding | Type              | Units  | Default  | Range  |
| ------------------ | ----- | ------- | ----------------- | ------ | -------- | ------ |
| `SRTO_TSBPDMODE`   | 0.0.0 | pre     | `int32_t` (bool?) | false  | true     | false  |

- Timestamp-based Packet Delivery mode. This flag is set to _true_ by default 
and as a default flag set in live mode.
---

| OptName            | Since | Binding | Type  | Units  | Default     | Range  |
| ------------------ | ----- | ------- | ----- | ------ | ----------- | ------ |
| `SRTO_UDP_RCVBUF`  |       | pre     | `int` | bytes  | 8192 × 1500 | MSS..  |

- UDP Socket Receive Buffer Size.  Configured in bytes, maintained in packets 
based on MSS value. Receive buffer must not be greater than FC size.
---

| OptName               | Since | Binding | Type  | Units  | Default  | Range  |
| --------------------- | ----- | ------- | ----- | ------ | -------- | ------ |
| `SRTO_UDP_SNDBUF`     |       | pre     | `int` | bytes  | 65536    | MSS..  |

- UDP Socket Send Buffer Size. Configured in bytes, maintained in packets based 
on `SRTO_MSS` value. *SRT recommended value:* `1024*1024`
---

| OptName           | Since | Binding | Type      | Units  | Default  | Range  |
| ----------------- | ----- | ------- | --------- | ------ | -------- | ------ |
| `SRTO_VERSION`    | 1.1.0 | n/a     | `int32_t` |        | n/a      | n/a    |

- (r)
- Local SRT version. This is the highest local version supported if not connected, 
or the highest version supported by the peer if connected.
- The version format in hex is 0xXXYYZZ for x.y.z in human readable form, 
where x = ("%d", (version>>16) & 0xff), etc.
- Set could eventually be supported to test 


